{"version":3,"file":"comment_area.min.js","sources":["../src/comment_area.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Control the element in comment area.\n *\n * @module    mod_studentquiz/comment_area\n * @copyright 2020 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\n/**\n * @module mod_studentquiz/comment_element\n */\ndefine(['jquery', 'core/str', 'core/ajax', 'core/modal_factory', 'core/templates', 'core/fragment', 'core/modal_events',\n        'tiny_autosave/repository'],\n    function($, str, ajax, ModalFactory, Templates, fragment, ModalEvents, TinyRepository) {\n        var t = {\n            EMPTY_CONTENT: ['<br><p><br></p>', '<p><br></p>', '<br>', ''],\n            ROOT_COMMENT_VALUE: 0,\n            GET_ALL_VALUE: 0,\n            TEMPLATE_COMMENTS: 'mod_studentquiz/comments',\n            TEMPLATE_COMMENT: 'mod_studentquiz/comment',\n            ACTION_CREATE: 'mod_studentquiz_create_comment',\n            ACTION_CREATE_REPLY: 'mod_studentquiz_create_reply',\n            ACTION_GET_ALL: 'mod_studentquiz_get_comments',\n            ACTION_EXPAND: 'mod_studentquiz_expand_comment',\n            ACTION_DELETE: 'mod_studentquiz_delete_comment',\n            ACTION_EDIT: 'mod_studentquiz_edit_comment',\n            ACTION_LOAD_FRAGMENT_FORM: 'mod_studentquiz_load_fragment_form',\n            ACTION_LOAD_FRAGMENT_EDIT_FORM: 'mod_studentquiz_load_fragment_edit_form',\n            ACTION_EXPAND_ALL: 'action_expand_all',\n            ACTION_COLLAPSE_ALL: 'action_collapse_all',\n            ACTION_RENDER_COMMENT: 'action_render_comment',\n            ACTION_APPEND_COMMENT: 'action_append_comment',\n            ACTION_EDITOR_INIT: 'action_editor_init',\n            ACTION_INIT: 'action_init',\n            ACTION_UPDATE_COMMENT_COUNT: 'action_update_comment_count',\n            ACTION_CLEAR_FORM: 'action_clear_form',\n            ACTION_SHOW_ERROR: 'action_show_error',\n            FRAGMENT_FORM_CALLBACK: 'commentform',\n            FRAGMENT_EDIT_FORM_CALLBACK: 'commenteditform',\n            HAS_COMMENT_CLASS: 'has-comment',\n            ATTO_CONTENT_TYPE: {\n                HAS_CONTENT: 'has-content',\n                NO_CONTENT: 'no-content'\n            },\n            SELECTOR: {\n                CONTAINER: '.studentquiz-comment-container',\n                EXPAND_ALL: '.studentquiz-comment-expand',\n                COLLAPSE_ALL: '.studentquiz-comment-collapse',\n                SUBMIT_BUTTON: '#id_submitbutton',\n                CONTAINER_REPLIES: '.studentquiz-container-replies',\n                COMMENT_REPLIES_CONTAINER: '.studentquiz-comment-replies',\n                COMMENT_COUNT: '.studentquiz-comment-postcount',\n                COMMENT_TEXT_CONTAINER: '.studentquiz-comment-text',\n                COMMENT_TEXT: '.studentquiz-comment-text-inside',\n                COMMENT_HISTORY: '.studentquiz-comment-history',\n                COMMENT_REPLIES_TEXT: '.studentquiz-comment-replies .studentquiz-comment-text .studentquiz-comment-text-inside',\n                LOADING_ICON: '.studentquiz-comment-loading',\n                COMMENT_AREA_FORM: 'div.comment-area-form',\n                FORM_SELECTOR: '.studentquiz-comment-postform > div.comment-area-form',\n                NO_COMMENT: '.no-comment',\n                COLLAPSE_LINK: '.studentquiz-comment-collapselink',\n                EXPAND_LINK: '.studentquiz-comment-expandlink',\n                COMMENT_ITEM: '.studentquiz-comment-item',\n                COMMENT_REPLIES_CONTAINER_TO_ITEM: '.studentquiz-comment-replies .studentquiz-comment-item',\n                FRAGMENT_FORM: '.studentquiz-comment-postfragmentform',\n                BTN_DELETE: '.studentquiz-comment-btndelete',\n                BTN_REPLY: '.studentquiz-comment-btnreply',\n                BTN_DELETE_REPLY: '.studentquiz-comment-btndeletereply',\n                ATTO_EDITOR_WRAP: '.editor_atto_wrap',\n                TEXTAREA: 'textarea[id^=\"id_editor_question_\"]',\n                COMMENT_COUNT_NUMBER: '.studentquiz-comment-count-number',\n                COMMENT_COUNT_TEXT: '.studentquiz-comment-count-text',\n                ATTO: {\n                    CONTENT_WRAP: '.editor_atto_content_wrap',\n                    CONTENT: '.editor_atto_content',\n                    TOOLBAR: '.editor_atto_toolbar',\n                },\n                TINYMCE: {\n                    CONTENT: '.tox-edit-area',\n                },\n                COMMENT_ID: '#comment_',\n                // Is used when server render. We need to collect some stored data attributes to load events.\n                SPAN_COMMENT_ID: '#c',\n                TOTAL_REPLY: '.studentquiz-comment-totalreply',\n                COMMENT_FILTER: '.studentquiz-comment-filter',\n                COMMENT_FILTER_HIDE: '.hide-comment-filter',\n                COMMENT_ERROR: '.studentquiz-comment-container .comment-error',\n                BTN_REPORT: '.studentquiz-comment-btnreport',\n                COMMENT_FILTER_ITEM: '.studentquiz-comment-filter-item',\n                COMMENT_FILTER_NAME: '.studentquiz-comment-filter-name',\n                COMMENT_FILTER_TYPE: '.studentquiz-comment-filter-type',\n                BTN_EDIT: '.studentquiz-comment-btnedit',\n                BTN_EDIT_REPLY: '.studentquiz-comment-btneditreply',\n                ATTO_HTML_BUTTON: 'button.atto_html_button',\n                POST_FOOTER: '.studentquiz-comment-postfooter'\n            },\n            EDITOR: {\n                ATTO: {\n                    TYPE: 'atto',\n                },\n                TINYMCE: {\n                    TYPE: 'tiny',\n                },\n                TEXTAREA: {\n                    TYPE: 'textarea',\n                },\n            },\n            get: function() {\n                return {\n                    elementSelector: null,\n                    btnExpandAll: null,\n                    btnCollapseAll: null,\n                    addComment: null,\n                    containerSelector: null,\n                    studentQuizQuestionId: null,\n                    dialogue: null,\n                    loadingIcon: null,\n                    lastFocusElement: null,\n                    formSelector: null,\n                    contextId: null,\n                    userId: null,\n                    string: {},\n                    deleteDialog: null,\n                    deleteTarget: null,\n                    numberToShow: 5,\n                    cmId: null,\n                    countServerData: [],\n                    lastCurrentCount: 0,\n                    lastTotal: 0,\n                    expand: false,\n                    forceCommenting: false,\n                    canViewDeleted: false,\n                    hasComment: false,\n                    referer: null,\n                    highlight: 0,\n                    sortFeature: null,\n                    sortable: [],\n                    workingState: false,\n                    isNoComment: false,\n                    type: 0,\n\n                    /**\n                     * Init function.\n                     *\n                     * @param {Object} params\n                     */\n                    init: function(params) {\n                        M.util.js_pending(t.ACTION_INIT);\n                        var self = this;\n                        // Assign attribute.\n                        self.elementSelector = $('#' + $.escapeSelector(params.id));\n                        var el = self.elementSelector;\n\n                        self.btnExpandAll = el.find(t.SELECTOR.EXPAND_ALL);\n                        self.btnCollapseAll = el.find(t.SELECTOR.COLLAPSE_ALL);\n                        self.addComment = el.find(t.SELECTOR.SUBMIT_BUTTON);\n                        self.containerSelector = el.find(t.SELECTOR.CONTAINER_REPLIES);\n                        self.loadingIcon = el.find(t.SELECTOR.LOADING_ICON);\n                        self.formSelector = el.find(t.SELECTOR.FORM_SELECTOR);\n                        self.studentQuizQuestionId = parseInt(el.data('studentquizquestionid'));\n                        self.contextId = parseInt(el.data('contextid'));\n                        self.userId = parseInt(el.data('userid'));\n                        self.numberToShow = parseInt(el.data('numbertoshow'));\n                        self.cmId = parseInt(el.data('cmid'));\n\n                        self.countServerData = {\n                            count: params.count,\n                            total: params.total\n                        };\n\n                        self.expand = params.expand || false;\n                        self.referer = el.data('referer');\n                        self.sortFeature = params.sortfeature;\n                        self.sortable = el.data('sortable');\n                        self.type = params.type;\n\n                        // Get all language strings.\n                        self.string = el.data('strings');\n                        self.forceCommenting = params.forcecommenting;\n                        self.canViewDeleted = params.canviewdeleted;\n                        self.isNoComment = params.isnocomment;\n                        self.allowSelfCommentRating = params.allowselfcommentrating;\n                        self.isusingtinymce = params.isusingtinymce;\n\n                        self.initServerRender();\n                        if (params.allowselfcommentrating) {\n                            self.initBindEditor();\n                        }\n                        self.bindEvents();\n                        M.util.js_complete(t.ACTION_INIT);\n                    },\n\n                    /**\n                     * Init for server rendering.\n                     */\n                    initServerRender: function() {\n                        var self = this;\n                        self.changeWorkingState(true);\n                        self.elementSelector.find(t.SELECTOR.COMMENT_ITEM).each(function() {\n                            var id = $(this).data('id');\n                            var attrs = $(this).find(t.SELECTOR.SPAN_COMMENT_ID + id);\n                            var replies = [];\n                            if (self.expand) {\n                                replies = attrs.data('replies') || [];\n                            }\n                            var comment = {\n                                id: $(this).data('id'),\n                                deleted: attrs.data('deleted'),\n                                numberofreply: attrs.data('numberofreply'),\n                                expanded: self.expand,\n                                replies: replies,\n                                root: true,\n                                type: self.type\n                            };\n                            self.bindCommentEvent(comment);\n                        });\n\n                        // If expanded, current comment count is total comments + replies.\n                        var commentcount = self.expand ? self.countServerData.total : self.countServerData.count.commentcount;\n                        self.updateCommentCount(commentcount, self.countServerData.total);\n\n                        if (self.expand) {\n                            self.btnExpandAll.hide();\n                            self.btnCollapseAll.show();\n                        } else {\n                            self.btnExpandAll.show();\n                            self.btnCollapseAll.hide();\n                        }\n\n                        // Highlight.\n                        var query = window.location.search.substring(1);\n                        var getParams = self.parseQueryString(query);\n                        self.highlight = parseInt(getParams.highlight) || 0;\n                        // End set highlight.\n\n                        // Scroll to.\n                        if (self.highlight !== 0) {\n                            var target = $(t.SELECTOR.COMMENT_ID + self.highlight);\n                            if (target.length) {\n                                self.scrollToElement(target);\n                            }\n                        }\n\n                        self.changeWorkingState(false);\n                    },\n\n                    /**\n                     * Init comment editor.\n                     */\n                    initBindEditor: function() {\n                        var self = this;\n                        var isEditorLoaded = false;\n                        M.util.js_pending(t.ACTION_EDITOR_INIT);\n                        // Interval to init atto editor, there are time when Atto's Javascript slow to init the editor, so we\n                        // check interval here to make sure the Atto is init before calling our script.\n                        var interval = setInterval(function() {\n                            // Check whether TinyMCE is being used and wait for the editor to fully load.\n                            var editor = self.isusingtinymce ?\n                                    window?.tinyMCE?.get(\n                                        self.formSelector?.find(t.SELECTOR.TEXTAREA)?.attr('id') ?? '') : null;\n                            if (!self.isusingtinymce || (editor && editor?.getBody())) {\n                                // Binding events to the editor.\n                                self.bindEditorEvent(self.formSelector);\n                                isEditorLoaded = true;\n                                clearInterval(interval);\n                                M.util.js_complete(t.ACTION_EDITOR_INIT);\n                            }\n                        }, 500);\n\n                        // If the editor has some content that has been restored\n                        // then check the editor content.\n                        var editorWaiting = setInterval(function() {\n                            if (isEditorLoaded) {\n                                if (self.isusingtinymce) {\n                                    const textareaSelector = self.formSelector.find(t.SELECTOR.TEXTAREA);\n                                    const tinyEditorId = textareaSelector.attr('id');\n                                    const editor = window.tinyMCE.get(tinyEditorId);\n                                    self.checkEditorContent(self.formSelector, editor.getBody(), t.EDITOR.TINYMCE.TYPE);\n                                } else {\n                                    self.checkEditorContent(self.formSelector);\n                                }\n                                clearInterval(editorWaiting);\n                            }\n                        }, 1000);\n                    },\n\n                    /**\n                     * Bind events: \"Expand all comments\", \"Collapse all comments\", \"Add Reply\".\n                     */\n                    bindEvents: function() {\n                        var self = this;\n                        // Bind event to \"Expand all comments\" button.\n                        self.btnExpandAll.click(function(e) {\n                            e.preventDefault();\n                            M.util.js_pending(t.ACTION_EXPAND_ALL);\n                            self.changeWorkingState(true);\n                            // Empty the replies section to append new response.\n                            self.containerSelector.empty();\n                            // Change button from expand to collapse collapse and disabled button since we don't want user to\n                            // press the button when javascript is appending item or ajax is working.\n                            self.btnExpandAll.hide();\n                            self.btnCollapseAll.show();\n                            self.loadingIcon.show();\n                            self.getComments(t.GET_ALL_VALUE).then(function(response) {\n                                // Calculate length to display count.\n                                var count = self.countCommentAndReplies(response.data);\n                                var total = count.total;\n                                self.updateCommentCount(total, response.total);\n                                self.renderComment(response.data, true);\n                                M.util.js_complete(t.ACTION_EXPAND_ALL);\n                                return true;\n                            }).fail(function(err) {\n                                M.util.js_complete(t.ACTION_EXPAND_ALL);\n                                self.showError(err.message);\n                                return false;\n                            });\n                        });\n\n                        // Bind event to \"Collapse all comments\" button.\n                        self.btnCollapseAll.click(function(e) {\n                            e.preventDefault();\n                            M.util.js_pending(t.ACTION_COLLAPSE_ALL);\n                            self.changeWorkingState(true);\n                            self.loadingIcon.show();\n                            self.btnCollapseAll.hide();\n                            self.btnExpandAll.show();\n                            self.containerSelector[0].innerHTML = '';\n                            self.getComments(self.numberToShow).then(function(response) {\n                                // Calculate length to display the post count.\n                                var count = self.countCommentAndReplies(response.data);\n                                var commentCount = count.commentCount;\n                                var deletedComments = count.totalDelete;\n                                // Only show expand button and count if comment existed.\n                                if (commentCount !== 0 || deletedComments !== 0) {\n                                    self.btnExpandAll.show();\n                                    self.updateCommentCount(commentCount, response.total);\n                                    self.renderComment(response.data, false);\n                                } else {\n                                    // No comment found hide loading icon.\n                                    self.loadingIcon.hide();\n                                    self.changeWorkingState(false);\n                                    self.updateCommentCount(0, 0);\n                                }\n                                M.util.js_complete(t.ACTION_COLLAPSE_ALL);\n                                return true;\n                            }).fail(function(err) {\n                                M.util.js_complete(t.ACTION_COLLAPSE_ALL);\n                                self.showError(err.message);\n                                return false;\n                            });\n                        });\n\n                        // Bind event to \"Add Reply\" button (Root comment).\n                        self.addComment.click(function(e) {\n                            e.preventDefault();\n                            M.util.js_pending(t.ACTION_CREATE);\n                            self.changeWorkingState(true);\n                            self.loadingIcon.show();\n                            // Hide error if exists.\n                            $(t.SELECTOR.COMMENT_ERROR).addClass('hide');\n                            // Hide no comment.\n                            $(t.SELECTOR.NO_COMMENT).hide();\n                            var rootId = t.ROOT_COMMENT_VALUE;\n                            var unique = self.studentQuizQuestionId + '_' + self.type + '_' + rootId;\n                            var formSelector = self.formSelector;\n                            var formData = self.convertFormToJson(formSelector);\n                            // Check message field.\n                            if (formData['message[text]'].length === 0) {\n                                // Show message, atto won't auto show after second form is appended.\n                                var attoWrap = formSelector.find(t.SELECTOR.ATTO_EDITOR_WRAP);\n                                if (attoWrap.length !== 0 && !attoWrap.hasClass('error')) {\n                                    attoWrap.addClass('error');\n                                    attoWrap.prepend('<span class=\"error\" tabindex=\"0\">' + self.string.required + '</span>');\n                                }\n                                M.util.js_complete(t.ACTION_CREATE);\n                                return false;\n                            }\n                            var params = {\n                                replyto: rootId,\n                                message: {\n                                    text: formData['message[text]'],\n                                    format: formData['message[format]'],\n                                },\n                            };\n                            self.createComment(params).then(function(response) {\n                                // Remove the draft data from the editor after successfully creating a comment.\n                                self.removeTinyAutoSaveSession(\n                                    self.formSelector?.find(t.SELECTOR.TEXTAREA)?.attr('id') ?? '');\n                                M.util.js_pending(t.ACTION_CLEAR_FORM);\n                                // Clear form in setTimeout to prevent require message still shown when reset on Firefox.\n                                setTimeout(function() {\n                                    // Clear form data.\n                                    if (self.isusingtinymce) {\n                                        self.resetContent(formSelector, t.EDITOR.TINYMCE.TYPE);\n                                    } else if (self.formSelector.find(t.SELECTOR.ATTO.CONTENT).length !== 0) {\n                                        self.formSelector.trigger('reset');\n                                        // Clear atto editor data.\n                                        if (!formSelector.find('#id_editor_question_' + unique + 'editable').is(':visible')) {\n                                            // HTML mode. Switch back to normal mode.\n                                            self.elementSelector.find(t.SELECTOR.ATTO_HTML_BUTTON).trigger('click');\n                                        }\n                                        formSelector.find('#id_editor_question_' + unique + 'editable').empty();\n                                        formSelector.find(t.SELECTOR.TEXTAREA).trigger('change');\n                                    } else {\n                                        self.resetContent(formSelector, t.EDITOR.TEXTAREA.TYPE);\n                                    }\n                                    M.util.js_complete(t.ACTION_CLEAR_FORM);\n                                });\n                                var data = self.convertForTemplate(response, true);\n                                // Disable reply button since content is now empty.\n                                formSelector.find(t.SELECTOR.SUBMIT_BUTTON).addClass('disabled');\n                                self.appendComment(data, self.elementSelector.find(t.SELECTOR.CONTAINER_REPLIES), false);\n                                M.util.js_complete(t.ACTION_CREATE);\n                                return true;\n                            }).fail(function(e) {\n                                self.handleFailWhenCreateComment(e, params);\n                                M.util.js_complete(t.ACTION_CREATE);\n                            });\n                            return true;\n                        });\n\n                        // Bind events filter sort.\n                        self.elementSelector.find(t.SELECTOR.COMMENT_FILTER_ITEM).on('click', function(e) {\n                            e.preventDefault();\n                            // Check if current state is working, return.\n                            if (self.workingState) {\n                                return;\n                            }\n\n                            var asc = self.string.sort.asc;\n                            var desc = self.string.sort.desc;\n\n                            var nameSelector = $(this).find(t.SELECTOR.COMMENT_FILTER_NAME);\n                            var iconSelector = $(this).find(t.SELECTOR.COMMENT_FILTER_TYPE);\n\n                            // Get sort type from data-type.\n                            var type = $(this).data('type');\n                            var orderBy = $(this).attr('data-order');\n                            var isCurrent = $(this).hasClass('current');\n                            var ascString = $(this).attr('data-asc-string');\n                            var descString = $(this).attr('data-desc-string');\n\n                            // Get current orderBy from data-order. If not current sort, don't change.\n                            // Then reverse it to opposite orderBy and call to API.\n                            // Example: current is desc, then we should call order by = asc to api.\n\n                            orderBy = orderBy === 'desc' ? 'asc' : 'desc';\n                            // Ok we attach that orderBy to current order by.\n                            $(this).attr('data-order', orderBy);\n\n                            if (!isCurrent) {\n                                $(this).addClass('current');\n                            }\n\n                            if (orderBy === 'desc') {\n                                nameSelector.attr('title', ascString);\n                                nameSelector.attr('alt', ascString);\n                                iconSelector.attr('title', desc);\n                                iconSelector.attr('alt', desc);\n                            } else {\n                                nameSelector.attr('title', descString);\n                                nameSelector.attr('alt', descString);\n                                iconSelector.attr('title', asc);\n                                iconSelector.attr('alt', asc);\n                            }\n\n                            // Note: new text is the opposite of current sort type (old type).\n\n                            // Reset all filter elements to its default.\n                            self.elementSelector.find(t.SELECTOR.COMMENT_FILTER_ITEM).not(this).each(function() {\n                                var each = $(this);\n                                var eachName = $(this).find(t.SELECTOR.COMMENT_FILTER_NAME);\n                                var eachType = $(this).find(t.SELECTOR.COMMENT_FILTER_TYPE);\n                                var defaultString = $(this).attr('data-asc-string');\n                                each.attr('data-order', 'desc');\n                                each.removeClass('filter-asc');\n                                each.removeClass('filter-desc');\n                                each.removeClass('current');\n                                eachName.attr('title', defaultString);\n                                eachName.attr('alt', defaultString);\n                                eachType.attr('title', asc);\n                                eachType.attr('alt', asc);\n                            });\n\n                            if (orderBy === 'desc') {\n                                $(this).removeClass('filter-asc');\n                                $(this).addClass('filter-desc');\n                            } else {\n                                $(this).removeClass('filter-desc');\n                                $(this).addClass('filter-asc');\n                            }\n\n                            // Build to sort type. Example: date_asc, date_desc.\n                            var sortType = type + '_' + orderBy;\n                            self.setSort(sortType);\n\n                            if (self.expand) {\n                                self.btnExpandAll.trigger('click');\n                            } else {\n                                self.btnCollapseAll.trigger('click');\n                            }\n                        });\n                    },\n\n                    /**\n                     * Get comments, numbertoshow = 0 will get all comment + replies.\n                     *\n                     * @param {Integer} numberToShow\n                     * @returns {Promise}\n                     */\n                    getComments: function(numberToShow) {\n                        var self = this;\n                        var params = self.getParamsBeforeCallApi({\n                            numbertoshow: numberToShow,\n                            sort: self.sortFeature,\n                            type: self.type\n                        });\n                        var promise = ajax.call([{\n                            methodname: t.ACTION_GET_ALL,\n                            args: params\n                        }]);\n                        return promise[0];\n                    },\n\n                    /**\n                     * Always map studentquizquestionid and cmId to request before send.\n                     *\n                     * @param {Object} params\n                     * @returns {Object}\n                     */\n                    getParamsBeforeCallApi: function(params) {\n                        var self = this;\n                        params.studentquizquestionid = self.studentQuizQuestionId;\n                        params.cmid = self.cmId;\n                        params.type = self.type;\n                        return params;\n                    },\n\n                    /**\n                     * Show error which call showDialog().\n                     *\n                     * @param {String} message\n                     */\n                    showError: function(message) {\n                        var self = this;\n                        M.util.js_pending(t.ACTION_SHOW_ERROR);\n                        // Get error string for title.\n                        $.when(self.string.error).done(function(string) {\n                            self.showDialog(string, message);\n                            self.changeWorkingState(false);\n                            M.util.js_complete(t.ACTION_SHOW_ERROR);\n                        });\n                    },\n\n                    /**\n                     * Show the dialog with custom title and body.\n                     *\n                     * @param {String} title\n                     * @param {String} body\n                     */\n                    showDialog: function(title, body) {\n                        var self = this;\n                        var dialogue = self.dialogue;\n                        if (dialogue) {\n                            // This dialog is existed, only change title and body and then display.\n                            dialogue.title.html(title);\n                            dialogue.body.html(body);\n                            dialogue.show();\n                            return;\n                        }\n                        ModalFactory.create({\n                            type: ModalFactory.types.CANCEL,\n                            title: title,\n                            body: body\n                        }).done(function(modal) {\n                            dialogue = modal;\n                            // Display the dialogue.\n                            dialogue.show();\n                            dialogue.getRoot().on(ModalEvents.hidden, {}, function() {\n                                location.reload();\n                            });\n                        });\n                    },\n\n                    /**\n                     * Update the comments count on UI, of second parameter is not set then use the last value.\n                     *\n                     * @param {Integer|NULL} current\n                     * @param {Integer|NULL} total\n                     */\n                    updateCommentCount: function(current, total) {\n                        M.util.js_pending(t.ACTION_UPDATE_COMMENT_COUNT);\n                        var self = this;\n\n                        // If total parameter is not set, use the old value.\n                        if (total === -1) {\n                            total = self.lastTotal;\n                        } else {\n                            self.lastTotal = total;\n                        }\n\n                        // If current parameter is not set, use the old value.\n                        if (current === -1) {\n                            current = self.lastCurrentCount;\n                        } else {\n                            self.lastCurrentCount = current;\n                        }\n\n                        // Get the postof local string and display.\n                        var s = str.get_string('current_of_total', 'studentquiz', {\n                            current: current,\n                            total: total\n                        });\n\n                        var noCommentSelector = self.elementSelector.find(t.SELECTOR.NO_COMMENT);\n                        var filter = self.elementSelector.find(t.SELECTOR.COMMENT_FILTER);\n                        var emptyReplies = self.checkEmptyElement(self.elementSelector.find(t.SELECTOR.CONTAINER_REPLIES));\n                        // Note: Admin will see deleted comments. Make sure replies container is empty.\n                        if (self.lastCurrentCount === 0 && emptyReplies && self.isNoComment) {\n                            self.elementSelector.find(t.SELECTOR.CONTAINER_REPLIES).hide();\n                            filter.hide();\n                            noCommentSelector.show();\n                        } else {\n                            self.elementSelector.find(t.SELECTOR.CONTAINER_REPLIES).show();\n                            noCommentSelector.hide();\n                            filter.show();\n                        }\n\n                        $.when(s).done(function(text) {\n                            self.elementSelector.find(t.SELECTOR.COMMENT_COUNT).text(text);\n                            M.util.js_complete(t.ACTION_UPDATE_COMMENT_COUNT);\n                        });\n                    },\n\n                    /**\n                     * Request template then append it into the page.\n                     *\n                     * @param {Array} comments\n                     * @param {Boolean} expanded\n                     */\n                    renderComment: function(comments, expanded) {\n                        var self = this;\n                        M.util.js_pending(t.ACTION_RENDER_COMMENT);\n                        comments = self.convertForTemplate(comments, expanded);\n                        Templates.render(t.TEMPLATE_COMMENTS, {\n                            comments: comments\n                        }).done(function(html) {\n                            // We render a lot of data, pure js here.\n                            self.containerSelector[0].innerHTML = html;\n                            // Turn off loading to show raw html first, then we bind events.\n                            self.loadingIcon.hide();\n                            // Loop to bind event.\n                            for (var i = 0; i < comments.length; i++) {\n                                self.bindCommentEvent(comments[i]);\n                            }\n                            self.changeWorkingState(false);\n                            M.util.js_complete(t.ACTION_RENDER_COMMENT);\n                        });\n                    },\n\n                    /**\n                     * Bind event to comment: report, reply, expand, collapse button.\n                     *\n                     * @param {Object} data\n                     */\n                    bindCommentEvent: function(data) {\n                        var self = this;\n                        // Loop comments and replies to get id and bind event for button inside it.\n                        var el = self.containerSelector.find(t.SELECTOR.COMMENT_ID + data.id);\n                        var i = 0;\n                        if (data.root && data.hasOwnProperty('replies')) {\n                            for (i; i < data.replies.length; i++) {\n                                var reply = data.replies[i];\n                                if (!reply.hasOwnProperty('expand')) {\n                                    reply.expand = true;\n                                }\n                                if (!reply.hasOwnProperty('root')) {\n                                    reply.root = false;\n                                }\n                                self.bindReplyEvent(reply, el);\n                            }\n                        }\n                        el.find(t.SELECTOR.BTN_DELETE).click(function(e) {\n                            self.bindDeleteEvent(data);\n                            e.preventDefault();\n                        });\n                        el.find(t.SELECTOR.BTN_REPLY).click(function(e) {\n                            e.preventDefault();\n                            self.getFragmentFormReplyEvent(data);\n                        });\n                        el.find(t.SELECTOR.EXPAND_LINK).click(function(e) {\n                            e.preventDefault();\n                            self.bindExpandEvent(data);\n                        });\n                        el.find(t.SELECTOR.COLLAPSE_LINK).click(function(e) {\n                            e.preventDefault();\n                            self.bindCollapseEvent(data);\n                        });\n                        el.find(t.SELECTOR.BTN_REPORT).click(function(e) {\n                            e.preventDefault();\n                            window.location = $(this).data('href');\n                        });\n                        el.find(t.SELECTOR.BTN_EDIT).click(function(e) {\n                            e.preventDefault();\n                            self.getFragmentEditFormEvent(data);\n                        });\n                    },\n\n                    /**\n                     * Bind event to reply's report and edit button.\n                     *\n                     * @param {Object} reply\n                     * @param {jQuery} el\n                     */\n                    bindReplyEvent: function(reply, el) {\n                        var self = this;\n                        var replySelector = el.find(t.SELECTOR.COMMENT_ID + reply.id);\n                        replySelector.find(t.SELECTOR.BTN_DELETE_REPLY).click(function(e) {\n                            self.bindDeleteEvent(reply);\n                            e.preventDefault();\n                        });\n                        replySelector.find(t.SELECTOR.BTN_REPORT).click(function(e) {\n                            e.preventDefault();\n                            window.location = $(this).data('href');\n                        });\n                        replySelector.find(t.SELECTOR.BTN_EDIT_REPLY).click(function(e) {\n                            e.preventDefault();\n                            self.getFragmentEditFormEvent(reply);\n                        });\n                    },\n\n                    /**\n                     * This function will disable/hide or enable/show when called depending on the working parameter.\n                     * Should call this function when we are going to perform the heavy operation like calling web service,\n                     * get render template, its will disabled button to prevent user from perform another action when page\n                     * is loading.\n                     * \"working\" is boolean parameter \"true\" will disable/hide \"false\" will enable/show.\n                     *\n                     * @param {Boolean} boolean\n                     * @param {null|jQuery} elementToHide\n                     */\n                    changeWorkingState: function(boolean, elementToHide = null) {\n                        var visibility = boolean ? 'hidden' : 'visible';\n                        var self = this;\n                        self.workingState = boolean;\n                        self.btnExpandAll.prop('disabled', boolean);\n                        self.btnCollapseAll.prop('disabled', boolean);\n                        self.elementSelector.find(t.SELECTOR.BTN_REPLY).prop('disabled', boolean);\n                        self.elementSelector.find(t.SELECTOR.BTN_DELETE).prop('disabled', boolean);\n                        self.elementSelector.find(t.SELECTOR.BTN_DELETE_REPLY).prop('disabled', boolean);\n                        self.elementSelector.find(t.SELECTOR.BTN_REPORT).prop('disabled', boolean);\n                        self.elementSelector.find(t.SELECTOR.EXPAND_LINK).css('visibility', visibility);\n                        self.elementSelector.find(t.SELECTOR.COLLAPSE_LINK).css('visibility', visibility);\n                        self.elementSelector.find(t.SELECTOR.BTN_EDIT).prop('disabled', boolean);\n                        self.elementSelector.find(t.SELECTOR.BTN_EDIT_REPLY).prop('disabled', boolean);\n                        if (self.deleteDialog) {\n                            self.deleteDialog.getFooter().find('button[data-action=\"yes\"]').prop('disabled', boolean);\n                        }\n                        if (boolean) {\n                            self.addComment.prop('disabled', boolean);\n                            if (elementToHide !== null && elementToHide instanceof $) {\n                                elementToHide.hide();\n                            }\n                        } else {\n                            if (self.lastFocusElement) {\n                                self.lastFocusElement.focus();\n                                self.lastFocusElement = null;\n                            }\n                            self.elementSelector.find(t.SELECTOR.POST_FOOTER).show();\n                        }\n                    },\n\n                    /**\n                     * Count comments, deleted comments and replies.\n                     *\n                     * @param {*} data\n                     * @returns {{\n                     * deleteReplyCount: number,\n                     * total: number,\n                     * replyCount: number,\n                     * totalDelete: number,\n                     * deleteCommentCount: number,\n                     * commentCount: number\n                     * }}\n                     */\n                    countCommentAndReplies: function(data) {\n                        var commentCount = 0;\n                        var deleteCommentCount = 0;\n                        var replyCount = 0;\n                        var deleteReplyCount = 0;\n\n                        if (data.constructor !== Array) {\n                            data = [data];\n                        }\n\n                        for (var i = 0; i < data.length; i++) {\n                            var item = data[i];\n                            if (item.deletedtime == 0) {\n                                commentCount++;\n                            } else {\n                                deleteCommentCount++;\n                            }\n                            for (var j = 0; j < item.replies.length; j++) {\n                                var reply = item.replies[j];\n                                if (reply.deletedtime == 0) {\n                                    replyCount++;\n                                } else {\n                                    deleteReplyCount++;\n                                }\n                            }\n                        }\n                        return {\n                            total: commentCount + replyCount,\n                            totalDelete: deleteCommentCount + deleteReplyCount,\n                            commentCount: commentCount,\n                            deleteCommentCount: deleteCommentCount,\n                            replyCount: replyCount,\n                            deleteReplyCount: deleteReplyCount\n                        };\n                    },\n\n                    /**\n                     * Call web service to info of comment and its replies.\n                     *\n                     * @param {Integer} id\n                     * @returns {Promise}\n                     */\n                    expandComment: function(id) {\n                        var self = this;\n                        var params = self.getParamsBeforeCallApi({\n                            commentid: id,\n                            type: self.type\n                        });\n                        var promise = ajax.call([{\n                            methodname: t.ACTION_EXPAND,\n                            args: params\n                        }]);\n                        return promise[0];\n                    },\n\n                    /**\n                     * Expand event handler.\n                     *\n                     * @param {Object} item\n                     */\n                    bindExpandEvent: function(item) {\n                        var self = this;\n                        var itemSelector = self.elementSelector.find(t.SELECTOR.COMMENT_ID + item.id);\n                        var key = t.ACTION_EXPAND;\n                        M.util.js_pending(key);\n                        self.changeWorkingState(true);\n                        // Clone loading icon selector then append into replies section.\n                        var loadingIcon = self.loadingIcon.clone().show();\n                        itemSelector.find(t.SELECTOR.COMMENT_REPLIES_CONTAINER).append(loadingIcon);\n                        $(self).hide();\n                        // Call expand post web service to get replies.\n                        self.expandComment(item.id).then(function(response) {\n                            var convertedItem = self.convertForTemplate(response, true);\n\n                            // Count current reply displayed, because user can reply to this comment then press expanded.\n                            var currentDisplayComment = itemSelector.find(t.SELECTOR.COMMENT_REPLIES_CONTAINER_TO_ITEM).length;\n\n                            // Update count, handle the case when another user add post then current user expand.\n                            var total = self.countCommentAndReplies(convertedItem).replyCount;\n                            var newCount = self.lastCurrentCount + total - currentDisplayComment;\n                            var newTotalCount = self.lastTotal + (convertedItem.numberofreply - item.numberofreply);\n\n                            if (item.deleted && !convertedItem.deleted) {\n                                newCount++;\n                                newTotalCount++;\n                            }\n\n                            // Normal comment, then deleted by someone else.\n                            if (!item.deleted && convertedItem.deleted) {\n                                newCount--;\n                                newTotalCount--;\n                            }\n\n                            // If current show == total mean that all items is shown.\n                            if (newCount === newTotalCount) {\n                                self.btnExpandAll.hide();\n                                self.btnCollapseAll.show();\n                            }\n\n                            self.updateCommentCount(newCount, newTotalCount);\n\n                            return Templates.render(t.TEMPLATE_COMMENT, convertedItem).done(function(html) {\n                                var el = $(html);\n                                itemSelector.replaceWith(el);\n                                self.lastFocusElement = el.find(t.SELECTOR.COLLAPSE_LINK);\n                                self.bindCommentEvent(response);\n                                self.changeWorkingState(false);\n                                M.util.js_complete(key);\n                                return true;\n                            });\n                        }).fail(function(e) {\n                            M.util.js_complete(key);\n                            self.showError(e.message);\n                        });\n                    },\n\n                    /**\n                     * Collapse event handler.\n                     *\n                     * @param {Object} item\n                     */\n                    bindCollapseEvent: function(item) {\n                        var self = this;\n\n                        var el = self.elementSelector.find(t.SELECTOR.COMMENT_ID + item.id);\n\n                        // Minus the comment currently show, exclude the deleted comment, update main count.\n                        // Using DOM to count the reply exclude the deleted, when user delete the reply belong to this comment,\n                        // current comment object don't know that, so we using DOM in this case.\n                        var commentCount = el.find(t.SELECTOR.COMMENT_REPLIES_TEXT).length;\n                        self.updateCommentCount(self.lastCurrentCount - commentCount, -1);\n                        // Assign back to comment object in case user then collapse the comment.\n                        item.numberofreply = commentCount;\n\n                        // Remove reply for this comment.\n                        el.find(t.SELECTOR.COMMENT_REPLIES_CONTAINER).empty();\n\n                        // Replace comment content with short content.\n                        if (item.deleted) {\n                            el.find('.studentquiz-comment-delete-content').html(item.shortcontent);\n                        } else {\n                            el.find(t.SELECTOR.COMMENT_TEXT).html(item.shortcontent);\n                        }\n\n                        // Hide collapse and show expand icon.\n                        el.find(t.SELECTOR.COLLAPSE_LINK).hide();\n                        el.find(t.SELECTOR.EXPAND_LINK).show().focus();\n\n                        // Update state.\n                        item.expanded = false;\n                    },\n\n                    /**\n                     * Convert for template render.\n                     *\n                     * @param {*} data\n                     * @param {Boolean} expanded\n                     * @returns {*}\n                     */\n                    convertForTemplate: function(data, expanded) {\n                        var self = this;\n                        var single = false;\n                        if (data.constructor !== Array) {\n                            data = [data];\n                            single = true;\n                        }\n                        for (var i = 0; i < data.length; i++) {\n                            var item = data[i];\n                            item.expanded = expanded;\n                            item.canviewdeleted = self.canViewDeleted;\n                            if (!item.hasOwnProperty('replies')) {\n                                item.replies = [];\n                            }\n                            self.setHasComment(item.hascomment);\n                            item.highlight = item.id === self.highlight;\n                            if (self.referer && item.reportlink) {\n                                item.reportlink = self.buildRefererReportLink(item.reportlink, item.id);\n                            }\n                            // Only root comment has replies.\n                            if (item.root) {\n                                for (var j = 0; j < item.replies.length; j++) {\n                                    var reply = item.replies[j];\n                                    reply.expanded = true;\n                                    reply.canviewdeleted = self.canViewDeleted;\n                                    if (!reply.hasOwnProperty('replies')) {\n                                        reply.replies = [];\n                                    }\n                                    reply.highlight = reply.id === self.highlight;\n                                    if (self.referer && reply.reportlink) {\n                                        reply.reportlink = self.buildRefererReportLink(reply.reportlink, reply.id);\n                                    }\n                                }\n                            }\n                            item.allowselfcommentrating = self.allowSelfCommentRating;\n                        }\n                        return single ? data[0] : data;\n                    },\n\n                    /**\n                     * Convert form data to Json require for web service.\n                     * Note: attempt.php had form already, we cannot have a form inside a form.\n                     *\n                     * @param {jQuery} form\n                     * @returns {Object}\n                     */\n                    convertFormToJson: function(form) {\n                        var data = {};\n                        form.find(\":input\").each(function() {\n                            var type = $(this).prop(\"type\");\n                            var name = $(this).attr('name');\n                            // Checked radios/checkboxes.\n                            if ((type === \"checkbox\" || type === \"radio\") && this.checked\n                                || (type !== \"button\" && type !== \"submit\")) {\n                                data[name] = $(this).val();\n                            }\n                        });\n                        return data;\n                    },\n\n                    /**\n                     * Call web services to create comment.\n                     *\n                     * @param {Object} data\n                     * @returns {Promise}\n                     */\n                    createComment: function(data) {\n                        var self = this;\n                        data = self.getParamsBeforeCallApi(data);\n                        var promise = ajax.call([{\n                            methodname: t.ACTION_CREATE,\n                            args: data\n                        }]);\n                        return promise[0];\n                    },\n\n                    /**\n                     * Append comment to the DOM, and call another function to bind the event into it.\n                     *\n                     * @param {Object} item\n                     * @param {jQuery} target\n                     * @param {Boolean} isReply\n                     */\n                    appendComment: function(item, target, isReply) {\n                        var self = this;\n                        M.util.js_pending(t.ACTION_APPEND_COMMENT);\n                        Templates.render(t.TEMPLATE_COMMENT, item).done(function(html) {\n                            var el = $(html);\n                            target.append(el);\n                            if (!self.lastCurrentCount) {\n                                // This is the first reply.\n                                self.elementSelector.find(t.SELECTOR.COMMENT_FILTER).removeClass(t.SELECTOR.COMMENT_FILTER_HIDE);\n                                self.updateCommentCount(1, 1);\n                                self.btnExpandAll.prop('disabled', true);\n                                self.btnExpandAll.hide();\n                                self.btnCollapseAll.prop('disabled', false);\n                                self.btnCollapseAll.show();\n                                self.expand = true;\n                                self.isNoComment = false;\n                            } else {\n                                self.updateCommentCount(self.lastCurrentCount + 1, self.lastTotal + 1);\n                            }\n                            if (isReply) {\n                                self.bindReplyEvent(item, el.parent());\n                            } else {\n                                self.bindCommentEvent(item);\n                            }\n                            self.loadingIcon.hide();\n                            self.changeWorkingState(false);\n                            M.util.js_complete(t.ACTION_APPEND_COMMENT);\n                        });\n                    },\n\n                    /*\n                    * Call web services to get the fragment form, append to the DOM then bind event.\n                    * */\n                    loadFragmentForm: function(fragmentForm, item) {\n                        var self = this;\n                        M.util.js_pending(t.ACTION_LOAD_FRAGMENT_FORM);\n                        var params = self.getParamsBeforeCallApi({\n                            replyto: item.id,\n                            cancelbutton: true,\n                            forcecommenting: self.forceCommenting,\n                            type: self.type\n                        });\n                        // Clear error message on the main form to prevent Atto editor from focusing to old message.\n                        var attoWrap = self.formSelector.find(t.SELECTOR.ATTO_EDITOR_WRAP);\n                        if (attoWrap.length !== 0 && attoWrap.hasClass('error')) {\n                            attoWrap.removeClass('error');\n                            attoWrap.find('#id_error_message_5btext_5d').remove();\n                        }\n                        fragment.loadFragment(\n                            'mod_studentquiz',\n                            t.FRAGMENT_FORM_CALLBACK,\n                            self.contextId,\n                            params\n                        ).done(function(html, js) {\n                            Templates.replaceNodeContents(fragmentForm, html, js);\n                            // Focus form reply.\n                            var textFragmentFormId = '#id_editor_question_' + self.studentQuizQuestionId + '_' +\n                                self.type + '_' + item.id + 'editable';\n                            fragmentForm.find(textFragmentFormId).focus();\n                            // Disable the reply button by default because the reply content is always empty at the beginning.\n                            self.triggerAttoNoContent(fragmentForm);\n                            self.bindFragmentFormEvent(fragmentForm, item);\n                            M.util.js_complete(t.ACTION_LOAD_FRAGMENT_FORM);\n                        });\n                    },\n\n                    /*\n                    * Bind fragment form action button event like \"Reply\" or \"Save changes\".\n                    * */\n                    bindFragmentFormEvent: function(fragmentForm, item) {\n                        var self = this;\n                        var formFragmentSelector = fragmentForm.find(t.SELECTOR.COMMENT_AREA_FORM);\n                        fragmentForm.find(t.SELECTOR.SUBMIT_BUTTON).click(function(e) {\n                            e.preventDefault();\n                            self.changeWorkingState(true);\n                            var data = self.convertFormToJson(formFragmentSelector);\n                            // Check message field.\n                            if (data['message[text]'].length === 0) {\n                                return true; // Return true to trigger form validation and show error messages.\n                            }\n                            var clone = self.loadingIcon.clone().show();\n                            clone.appendTo(fragmentForm);\n                            formFragmentSelector.hide();\n                            self.createReplyComment(fragmentForm, item, formFragmentSelector, data);\n                            return true;\n                        });\n                        self.fragmentFormCancelEvent(formFragmentSelector, false);\n                        self.bindEditorEvent(fragmentForm);\n                    },\n\n                    /*\n                    * Call web services to create reply, update parent comment count, remove the fragment form.\n                    * */\n                    createReplyComment: function(replyContainer, item, formSelector, formData) {\n                        var self = this;\n                        var params = {\n                            replyto: item.id,\n                            message: {\n                                text: formData['message[text]'],\n                                format: formData['message[format]'],\n                            }\n                        };\n                        M.util.js_pending(t.ACTION_CREATE_REPLY);\n                        self.createComment(params).then(function(response) {\n                            // Remove draft data from the editor after successfully creating a reply comment.\n                            self.removeTinyAutoSaveSession(formSelector?.find(t.SELECTOR.TEXTAREA)?.attr('id'));\n                            // Hide error if exists.\n                            $(t.SELECTOR.COMMENT_ERROR).addClass('hide');\n                            var el = self.elementSelector.find(t.SELECTOR.COMMENT_ID + item.id);\n                            var repliesEl = el.find(t.SELECTOR.COMMENT_REPLIES_CONTAINER);\n\n                            // There are case when user delete the reply then add reply then the numberofreply property is\n                            // not correct because this comment object does not know the child object is deleted, so we update\n                            // comment count using DOM.\n                            item.numberofreply++;\n\n                            var numReply = parseInt(el.find(t.SELECTOR.COMMENT_COUNT_NUMBER).text()) + 1;\n\n                            // Update total count.\n                            el.find(t.SELECTOR.COMMENT_COUNT_NUMBER).text(numReply);\n                            el.find(t.SELECTOR.COMMENT_COUNT_TEXT).html(\n                                numReply === 1 ? self.string.reply : self.string.replies\n                            );\n\n                            replyContainer.empty();\n                            var data = self.convertForTemplate(response, true);\n                            self.appendComment(data, repliesEl, true);\n                            M.util.js_complete(t.ACTION_CREATE_REPLY);\n                            return true;\n                        }).fail(function(e) {\n                            self.handleFailWhenCreateComment(e, params);\n                            M.util.js_complete(t.ACTION_CREATE_REPLY);\n                        });\n                    },\n\n                    handleFailWhenCreateComment: function(e, params) {\n                        var self = this;\n                        self.showError(e.message);\n                        // Remove the fragment form container.\n                        var fragmentFormSelector = t.SELECTOR.COMMENT_ID + params.replyto + ' ' + t.SELECTOR.FRAGMENT_FORM;\n                        self.elementSelector.find(fragmentFormSelector).empty();\n                    },\n\n                    /*\n                    * Begin to load the fragment form for reply.\n                    * */\n                    getFragmentFormReplyEvent: function(item) {\n                        var self = this;\n                        var el = self.elementSelector.find(t.SELECTOR.COMMENT_ID + item.id);\n                        var fragmentForm = el.find(t.SELECTOR.FRAGMENT_FORM).first();\n                        var postFooter = el.find(t.SELECTOR.POST_FOOTER).first();\n                        var clone = self.loadingIcon.clone().show();\n                        fragmentForm.append(clone);\n                        fragmentForm.removeClass('edit');\n                        fragmentForm.addClass('reply');\n                        self.loadFragmentForm(fragmentForm, item);\n                        self.changeWorkingState(true, postFooter);\n                    },\n\n                    /**\n                     * Bind fragment form cancel button event.\n                     *\n                     * @param {jQuery} formSelector\n                     * @param {Boolean} isEdit\n                     */\n                    fragmentFormCancelEvent: function(formSelector, isEdit) {\n                        var self = this;\n                        formSelector.find('#id_cancel').click(function(e) {\n                            e.preventDefault();\n                            var commentSelector = formSelector.closest(t.SELECTOR.COMMENT_ITEM);\n                            if (isEdit) {\n                                self.lastFocusElement = commentSelector.find(t.SELECTOR.BTN_EDIT);\n                            } else {\n                                self.lastFocusElement = commentSelector.find(t.SELECTOR.BTN_REPLY);\n                            }\n                            self.changeWorkingState(false);\n                            formSelector.parent().empty();\n                        });\n                    },\n\n                    /**\n                     * Bind comment delete event.\n                     *\n                     * @param {Object} data\n                     */\n                    bindDeleteEvent: function(data) {\n                        var self = this;\n                        self.deleteTarget = data;\n                        if (self.deleteDialog) {\n                            // Use the rendered modal.\n                            self.deleteDialog.show();\n                        } else {\n                            // Disabled button to prevent user from double click on button while loading for template\n                            // for the first time.\n                            self.changeWorkingState(true);\n                            ModalFactory.create({\n                                type: ModalFactory.types.DEFAULT,\n                                title: self.string.deletecomment,\n                                body: self.string.confirmdeletecomment,\n                                footer: '<button class=\"btn btn-primary\" type=\"button\" data-action=\"yes\" title=\"' +\n                                    self.string.deletecomment + '\">' + self.string.deletetext + '</button>' +\n                                    '<button class=\"btn btn-secondary\" type=\"button\" data-action=\"no\" title=\"' +\n                                    self.string.cancel + '\">' +\n                                    self.string.cancel + '</button>'\n                            }).done(function(modal) {\n                                // Save modal for later.\n                                self.deleteDialog = modal;\n\n                                // Bind event for cancel button.\n                                modal.getFooter().find('button[data-action=\"no\"]').click(function(e) {\n                                    e.preventDefault();\n                                    modal.hide();\n                                });\n\n                                // Bind event for delete button.\n                                modal.getFooter().find('button[data-action=\"yes\"]').click(function(e) {\n                                    e.preventDefault();\n                                    M.util.js_pending(t.ACTION_DELETE);\n                                    self.changeWorkingState(true);\n                                    // Call web service to delete post.\n                                    self.deleteComment(self.deleteTarget.id).then(function(response) {\n                                        if (!response.success) {\n                                            self.showError(response.message);\n                                            return true;\n                                        }\n\n                                        var convertedCommentData = self.convertForTemplate(response.data,\n                                            self.deleteTarget.expanded);\n\n                                        // Delete success, begin to call template and render the page again.\n                                        var commentSelector = self.elementSelector.find(t.SELECTOR.COMMENT_ID +\n                                            convertedCommentData.id);\n\n                                        var deletedComments = 1;\n\n                                        // Update global comment count.\n                                        self.updateCommentCount(\n                                            self.lastCurrentCount - deletedComments,\n                                            self.lastTotal - deletedComments\n                                        );\n\n                                        // Reply will always be expanded.\n                                        // Root comment deleted all replies => collapsed.\n                                        if (!convertedCommentData.root) {\n                                            convertedCommentData.expanded = true;\n                                        }\n\n                                        // Call template to render.\n                                        Templates.render(t.TEMPLATE_COMMENT, convertedCommentData).done(function(html) {\n                                            var el = $(html);\n\n                                            // Update the parent comment count if we delete reply before replace.\n                                            if (!convertedCommentData.root) {\n                                                var parentSelector = commentSelector.parent();\n                                                var parentCountSelector = parentSelector.closest(t.SELECTOR.COMMENT_ITEM)\n                                                    .find(t.SELECTOR.TOTAL_REPLY);\n                                                var countSelector = parentCountSelector.find(t.SELECTOR.COMMENT_COUNT_NUMBER);\n                                                var newCount = parseInt(countSelector.text()) - 1;\n                                                parentCountSelector.find(t.SELECTOR.COMMENT_COUNT_NUMBER).text(newCount);\n                                                parentCountSelector.find(t.SELECTOR.COMMENT_COUNT_TEXT).html(\n                                                    newCount === 1 ? self.string.reply : self.string.replies\n                                                );\n                                            }\n\n                                            // Clone replies and append because the replies will be replaced by template.\n                                            var oldReplies = commentSelector.find(t.SELECTOR.COMMENT_REPLIES_CONTAINER)\n                                                .clone(true);\n                                            commentSelector.replaceWith(el);\n                                            el.find(t.SELECTOR.COMMENT_REPLIES_CONTAINER).replaceWith(oldReplies);\n                                            if (self.deleteTarget.root) {\n                                                self.bindCommentEvent(response.data);\n                                            } else {\n                                                self.bindReplyEvent(response.data, el.parent());\n                                            }\n                                            self.changeWorkingState(false);\n                                            M.util.js_complete(t.ACTION_DELETE);\n                                        });\n                                        modal.hide();\n                                        return true;\n                                    }).fail(function(err) {\n                                        self.showError(err.message);\n                                        return false;\n                                    });\n                                });\n\n                                // Focus back to delete button when user hide modal.\n                                modal.getRoot().on(ModalEvents.hidden, function() {\n                                    var el = self.elementSelector.find(t.SELECTOR.COMMENT_ID + self.deleteTarget.id);\n                                    // Focus on different element base on comment or reply.\n                                    if (self.deleteTarget.root) {\n                                        el.find(t.SELECTOR.BTN_DELETE).first().focus();\n                                    } else {\n                                        el.find(t.SELECTOR.BTN_DELETE_REPLY).first().focus();\n                                    }\n                                });\n\n                                // Enable button when modal is shown.\n                                modal.getRoot().on(ModalEvents.shown, function() {\n                                    self.changeWorkingState(false);\n                                });\n\n                                // Display the dialogue.\n                                modal.show();\n\n                                self.changeWorkingState(false);\n                            });\n                        }\n                    },\n\n                    /**\n                     * Delete comment API.\n                     *\n                     * @param {Integer} id\n                     * @returns {Promise}\n                     */\n                    deleteComment: function(id) {\n                        var self = this;\n                        var params = self.getParamsBeforeCallApi({\n                            commentid: id\n                        });\n                        var promise = ajax.call([{\n                            methodname: t.ACTION_DELETE,\n                            args: params\n                        }]);\n                        return promise[0];\n                    },\n\n                    /**\n                     * Binds event handlers to the TinyMCE editor within the specified form.\n                     *\n                     * This function sets up a periodic check to ensure that the TinyMCE editor\n                     * is initialized. Once initialized, it binds a keydown event to the editor\n                     * that triggers the `checkEditorContent` function, allowing content validation\n                     * to occur each time the user types within the editor.\n                     *\n                     * @param {jQuery} formSelector - The jQuery object representing the form containing the TinyMCE editor.\n                     */\n                    bindHandleTinyEditor: function(formSelector) {\n                        var self = this;\n                        const textareaSelector = formSelector.find(t.SELECTOR.TEXTAREA);\n                        const tinyEditorId = textareaSelector.attr('id');\n                        const intervalID = setInterval(function() {\n                            if (window.tinyMCE) {\n                                const editor = window.tinyMCE.get(tinyEditorId);\n                                editor.on(\"input\", function() {\n                                    self.checkEditorContent(formSelector, editor.getBody(), t.EDITOR.TINYMCE.TYPE);\n                                });\n                                // It is necessary to check the SetContent event from the start because:\n                                // When the editor content is empty, the tiny_autosave_update_session service is called.\n                                // If there is existing restore data, it will be set in the editor, but this action won't trigger\n                                // the \"input\" event. Therefore, we need to use the SetContent event in this case.\n                                // The SetContent event is also triggered during undo and redo actions.\n                                editor.on(\"SetContent\", function() {\n                                    self.checkEditorContent(formSelector, editor.getBody(), t.EDITOR.TINYMCE.TYPE);\n                                });\n                                // This event will be triggered when user paste content.\n                                editor.on(\"change\", function() {\n                                    self.checkEditorContent(formSelector, editor.getBody(), t.EDITOR.TINYMCE.TYPE);\n                                });\n                                clearInterval(intervalID);\n                            }\n                        }, 100);\n                    },\n\n                    /**\n                     * Binds event handlers and initializes the Atto editor within the specified form.\n                     *\n                     * This function sets up the Atto editor by triggering initial placeholder settings,\n                     * displaying the toolbar, and setting up event listeners for content changes. It uses\n                     * a MutationObserver to monitor changes within the Atto editor, allowing dynamic\n                     * validation of the editor content. It also sets up a periodic check to handle draft content.\n                     *\n                     * @param {jQuery} formSelector - The jQuery object representing the form containing the Atto editor.\n                     */\n                    bindHandleAttoEditor: function(formSelector) {\n                        var self = this;\n                        M.util.js_pending('init_editor');\n                        self.triggerAttoNoContent(formSelector);\n                        self.setPlaceholder(formSelector, formSelector.attr('data-textarea-placeholder'));\n                        formSelector.find(t.SELECTOR.ATTO.TOOLBAR).fadeIn();\n                        var textareaSelector = formSelector.find(t.SELECTOR.TEXTAREA);\n                        var attoEditableId = textareaSelector.attr('id') + 'editable';\n                        var attoEditable = document.getElementById(attoEditableId);\n                        var observation = new MutationObserver(function(mutationsList) {\n                            mutationsList.forEach(function(mutation) {\n                                if (mutation.type === 'childList' || (mutation.type === 'attributes' &&\n                                    (mutation.attributeName === 'style' || mutation.attributeName === 'hidden'))) {\n                                    self.checkEditorContent(formSelector);\n                                }\n                            });\n                        });\n                        observation.observe(attoEditable, {attributes: true, childList: true, subtree: true});\n                        textareaSelector.change(function() {\n                            self.checkEditorContent(formSelector);\n                        });\n                        M.util.js_complete('init_editor');\n\n                        // Check interval for 5s in case draft content show up.\n                        var interval = setInterval(function() {\n                            formSelector.find('textarea[id^=\"id_message\"]').trigger('change');\n                        }, 350);\n\n                        setTimeout(function() {\n                            clearInterval(interval);\n                        }, 5000);\n                    },\n\n                    /**\n                     * Binds event handlers to a standard textarea editor within the specified form.\n                     *\n                     * This function sets up an input event listener on the textarea to monitor changes\n                     * in its content. Whenever the user types or modifies the content, the `checkEditorContent`\n                     * function is triggered to validate the editor's content based on the textarea type.\n                     *\n                     * @param {jQuery} formSelector - The jQuery object representing the form containing the textarea editor.\n                     */\n                    bindHandleTextareaEditor: function(formSelector) {\n                        var self = this;\n                        const textareaSelector = formSelector.find(t.SELECTOR.TEXTAREA);\n                        if (textareaSelector) {\n                            textareaSelector.on('input', function() {\n                                self.checkEditorContent(formSelector, textareaSelector[0],\n                                    t.EDITOR.TEXTAREA.TYPE);\n                            });\n                        }\n                    },\n\n                    /**\n                     * Bind event handlers for the text editor in the form.\n                     * This function checks the form for the presence of different types of text editors.\n                     * It supports TinyMCE, Atto, or a basic textarea.\n                     * Based on the editor found, it calls the appropriate handler function to bind the necessary events.\n                     *\n                     * @param {jQuery} formSelector - A jQuery selector representing the form containing the editor.\n                     */\n                    bindEditorEvent: function(formSelector) {\n                        var self = this;\n                        if (self.isusingtinymce) {\n                            self.bindHandleTinyEditor(formSelector);\n                        } else if (self.formSelector.find(t.SELECTOR.ATTO.CONTENT).length !== 0) {\n                            self.bindHandleAttoEditor(formSelector);\n                        } else {\n                           self.bindHandleTextareaEditor(formSelector);\n                        }\n                    },\n\n                    /**\n                     * Resets the content of the editor within the specified form to an empty state.\n                     *\n                     * This function checks the type of the editor (TinyMCE or standard textarea) and clears\n                     * its content accordingly. For TinyMCE editors, it uses the `setContent` method to clear\n                     * the content. For standard textareas, it directly sets the value to an empty string.\n                     *\n                     * @param {jQuery} formSelector - The jQuery object representing the form containing the editor.\n                     * @param {string} type - The type of the editor, which can be TinyMCE or textarea.\n                     */\n                    resetContent: function(formSelector, type) {\n                        const textareaSelector = formSelector.find(t.SELECTOR.TEXTAREA);\n                        if (type === t.EDITOR.TINYMCE.TYPE) {\n                            const tinyEditorId = textareaSelector.attr('id');\n                            const editor = window.tinyMCE.get(tinyEditorId);\n                            editor.setContent('');\n                        } else {\n                            textareaSelector[0].value = '';\n                        }\n                    },\n\n                    /**\n                     * Check if element is empty.\n                     *\n                     * @param {jQuery} el - Element.\n                     * @returns {boolean}\n                     */\n                    checkEmptyElement: function(el) {\n                        return el.children().length === 0;\n                    },\n\n                    /**\n                     * Set user has commented.\n                     *\n                     * @param {integer} value\n                     */\n                    setHasComment: function(value) {\n                        var self = this;\n                        var container = self.elementSelector;\n                        var hasCommentClass = t.HAS_COMMENT_CLASS;\n                        if (!self.forceCommenting) {\n                            self.hasComment = true;\n                            container.addClass(hasCommentClass);\n                        } else {\n                            self.hasComment = value;\n                            if (self.hasComment) {\n                                container.addClass(hasCommentClass);\n                            } else {\n                                container.removeClass(hasCommentClass);\n                            }\n                        }\n                    },\n\n                    /**\n                     * Parse query string.\n                     *\n                     * @param {string} query\n                     * @return {string}\n                     */\n                    parseQueryString: function(query) {\n                        var vars = query.split(\"&\");\n                        var queryString = {};\n                        for (var i = 0; i < vars.length; i++) {\n                            var pair = vars[i].split(\"=\");\n                            var key = decodeURIComponent(pair[0]);\n                            var value = decodeURIComponent(pair[1]);\n                            // If first entry with this name.\n                            if (typeof queryString[key] === \"undefined\") {\n                                queryString[key] = decodeURIComponent(value);\n                                // If second entry with this name.\n                            } else if (typeof queryString[key] === \"string\") {\n                                queryString[key] = [queryString[key], decodeURIComponent(value)];\n                                // If third or later entry with this name.\n                            } else {\n                                queryString[key].push(decodeURIComponent(value));\n                            }\n                        }\n                        return queryString;\n                    },\n\n                    /**\n                     * Scroll to element.\n                     *\n                     * @param {jQuery} target\n                     * @param {Integer} speed\n                     */\n                    scrollToElement: function(target, speed) {\n                        if (!target.length) {\n                            return;\n                        }\n                        if (typeof speed === 'undefined') {\n                            speed = 1000;\n                        }\n                        var top = target.offset().top;\n                        $('html,body').animate({scrollTop: top}, speed);\n                    },\n\n                    /**\n                     * Build referer report link.\n                     *\n                     * @param {string} link\n                     * @param {Integer} id\n                     * @returns {string}\n                     */\n                    buildRefererReportLink: function(link, id) {\n                        var self = this;\n                        var referer = decodeURIComponent(self.referer);\n                        // Add highlight.\n                        link += '&referer=' + encodeURIComponent(referer + '&highlight=' + id);\n                        return link;\n                    },\n\n                    /**\n                     * Handle when Atto has content.\n                     *\n                     * @param {jQuery} formSelector\n                     */\n                    triggerAttoHasContent: function(formSelector) {\n                        var editorContentWrap = formSelector.find(t.SELECTOR.ATTO.CONTENT_WRAP);\n                        var submitBtn = formSelector.find(t.SELECTOR.SUBMIT_BUTTON);\n                        submitBtn.removeClass('disabled');\n                        submitBtn.prop('disabled', false);\n                        editorContentWrap.addClass(t.ATTO_CONTENT_TYPE.HAS_CONTENT);\n                        editorContentWrap.removeClass(t.ATTO_CONTENT_TYPE.NO_CONTENT);\n                    },\n\n                    /**\n                     * Handle when Atto has no content.\n                     *\n                     * @param {jQuery} formSelector\n                     */\n                    triggerAttoNoContent: function(formSelector) {\n                        var editorContentWrap = formSelector.find(t.SELECTOR.ATTO.CONTENT_WRAP);\n                        var submitBtn = formSelector.find(t.SELECTOR.SUBMIT_BUTTON);\n                        submitBtn.addClass('disabled');\n                        submitBtn.prop('disabled', true);\n                        editorContentWrap.addClass(t.ATTO_CONTENT_TYPE.NO_CONTENT);\n                        editorContentWrap.removeClass(t.ATTO_CONTENT_TYPE.HAS_CONTENT);\n                    },\n\n                    /**\n                     * Set placeholder in the textarea.\n                     *\n                     * @param {jQuery} formSelector The form selector.\n                     * @param {string} placeholder The placeholder of the textarea.\n                     */\n                    setPlaceholder: function(formSelector, placeholder) {\n                        formSelector.find(t.SELECTOR.ATTO.CONTENT_WRAP).attr('data-placeholder', placeholder);\n                    },\n\n                    /**\n                     * Set sort depend on sortable array.\n                     *\n                     * @param {string} string\n                     */\n                    setSort: function(string) {\n                        var self = this;\n                        if ($.inArray(string, self.sortable) !== -1) {\n                            self.sortFeature = string;\n                        }\n                    },\n\n                    /**\n                     * Begin to load the fragment form for editing.\n                     *\n                     * @param {Object} item\n                     */\n                    getFragmentEditFormEvent: function(item) {\n                        var self = this;\n                        var el = self.elementSelector.find(t.SELECTOR.COMMENT_ID + item.id);\n                        var fragmentForm = el.find(t.SELECTOR.FRAGMENT_FORM).first();\n                        var postFooter = el.find(t.SELECTOR.POST_FOOTER).first();\n                        var clone = self.loadingIcon.clone().show();\n                        fragmentForm.append(clone);\n                        fragmentForm.removeClass('reply');\n                        fragmentForm.addClass('edit');\n                        self.loadFragmentEditForm(fragmentForm, item);\n                        self.changeWorkingState(true, postFooter);\n                    },\n\n                    /**\n                     * Call web services to get the fragment edit form, append to the DOM then bind event.\n                     *\n                     * @param {jQuery} fragmentForm\n                     * @param {Object} item\n                     */\n                    loadFragmentEditForm: function(fragmentForm, item) {\n                        var self = this;\n                        M.util.js_pending(t.ACTION_LOAD_FRAGMENT_EDIT_FORM);\n                        var params = self.getParamsBeforeCallApi({\n                            cancelbutton: true,\n                            forcecommenting: self.forceCommenting,\n                            commentid: item.id\n                        });\n                        // Clear error message on the main form to prevent Atto editor from focusing to old message.\n                        var attoWrap = self.formSelector.find(t.SELECTOR.ATTO_EDITOR_WRAP);\n                        if (attoWrap.length !== 0 && attoWrap.hasClass('error')) {\n                            attoWrap.removeClass('error');\n                            attoWrap.find('#id_error_message_5btext_5d').remove();\n                        }\n                        fragment.loadFragment(\n                            'mod_studentquiz',\n                            t.FRAGMENT_EDIT_FORM_CALLBACK,\n                            self.contextId,\n                            params\n                        ).done(function(html, js) {\n                            Templates.replaceNodeContents(fragmentForm, html, js);\n                            // Focus form.\n                            var textFragmentFormId = '#id_editor_question_' + self.studentQuizQuestionId +\n                                '_' + self.type + '_' + item.id + 'editable';\n                            fragmentForm.find(textFragmentFormId).focus();\n                            self.bindFragmentEditFormEvent(fragmentForm, item);\n                            M.util.js_complete(t.ACTION_LOAD_FRAGMENT_EDIT_FORM);\n                        });\n                    },\n\n                    /**\n                     * Bind fragment edit form action button event.\n                     *\n                     * @param {jQuery} fragmentForm\n                     * @param {Object} item\n                     */\n                    bindFragmentEditFormEvent: function(fragmentForm, item) {\n                        var self = this;\n                        var formFragmentSelector = fragmentForm.find(t.SELECTOR.COMMENT_AREA_FORM);\n                        fragmentForm.find(t.SELECTOR.SUBMIT_BUTTON).click(function(e) {\n                            e.preventDefault();\n                            self.changeWorkingState(true);\n                            var data = self.convertFormToJson(formFragmentSelector);\n                            // Check message field.\n                            if (data['message[text]'].length === 0) {\n                                return true; // Return true to trigger form validation and show error messages.\n                            }\n                            var clone = self.loadingIcon.clone().show();\n                            clone.appendTo(fragmentForm);\n                            formFragmentSelector.hide();\n                            self.editCommentEvent(fragmentForm, item, formFragmentSelector, data);\n                            return true;\n                        });\n                        self.fragmentFormCancelEvent(formFragmentSelector, true);\n                        self.bindEditorEvent(fragmentForm);\n                    },\n\n                    /**\n                     * Edit comment event.\n                     *\n                     * @param {jQuery} container\n                     * @param {Object} item\n                     * @param {jQuery} formSelector\n                     * @param {Object} formData\n                     */\n                    editCommentEvent: function(container, item, formSelector, formData) {\n                        var self = this;\n                        M.util.js_pending(t.ACTION_EDIT);\n                        var params = {\n                            commentid: item.id,\n                            message: {\n                                text: formData['message[text]'],\n                                format: formData['message[format]'],\n                            }\n                        };\n                        self.editComment(params).then(function(response) {\n                            // Hide error if exists.\n                            self.elementSelector.find(t.SELECTOR.COMMENT_ERROR).addClass('hide');\n                            var el = self.elementSelector.find(t.SELECTOR.COMMENT_ID + item.id);\n                            self.lastFocusElement = el.find(t.SELECTOR.BTN_EDIT);\n                            if (self.lastFocusElement.length === 0) {\n                                self.lastFocusElement = el.find(t.SELECTOR.BTN_EDIT_REPLY);\n                            }\n                            // Assign new content.\n                            item.shortcontent = response.shortcontent;\n                            response.expanded = item.expanded;\n                            Templates.render(t.TEMPLATE_COMMENT, response).done(function(html) {\n                                var el = $(html);\n                                var commentTextSelector = t.SELECTOR.COMMENT_ID + response.id + ' ' +\n                                    t.SELECTOR.COMMENT_TEXT_CONTAINER;\n                                self.elementSelector.find(commentTextSelector).first().html(el.find(\n                                    t.SELECTOR.COMMENT_TEXT_CONTAINER).html());\n                            });\n                            container.empty();\n                            self.changeWorkingState(false);\n                            M.util.js_complete(t.ACTION_EDIT);\n                            return true;\n                        }).fail(function(e) {\n                            self.handleFailWhenCreateComment(e, params);\n                            M.util.js_complete(t.ACTION_EDIT);\n                        });\n                    },\n\n                    /**\n                     * Call web services to edit comment.\n                     *\n                     * @param {Object} data\n                     * @returns {Promise}\n                     */\n                    editComment: function(data) {\n                        var self = this;\n                        data = self.getParamsBeforeCallApi(data);\n                        var promise = ajax.call([{\n                            methodname: t.ACTION_EDIT,\n                            args: data\n                        }]);\n                        return promise[0];\n                    },\n\n                    /**\n                     * Check editor content.\n                     *\n                     * @param {jQuery} formSelector\n                     * @param {jQuery} bodyContent The body content of the editor.\n                     * @param {string} type The type of editor. ex: 'tiny', 'atto', 'textarea'.\n                     */\n                    checkEditorContent: function(formSelector, bodyContent = null, type = '') {\n                        const key = 'text_change_' + Date.now();\n                        M.util.js_pending(key);\n\n                        const textareaSelector = formSelector.find(t.SELECTOR.TEXTAREA);\n                        let editorBodyContent;\n                        let contenthtml;\n                        let condition;\n\n                        // Handle different editor types.\n                        switch (type) {\n                            case t.EDITOR.TINYMCE.TYPE:\n                                editorBodyContent = $(bodyContent);\n                                contenthtml = editorBodyContent.html();\n                                condition = t.EMPTY_CONTENT.indexOf(contenthtml) > -1 ||\n                                    editorBodyContent.text().trim().length < 1;\n                                break;\n                            case t.EDITOR.ATTO.TYPE:\n                            case '':\n                                editorBodyContent = $('#' + textareaSelector.attr('id') + 'editable');\n                                contenthtml = editorBodyContent.html();\n                                condition = t.EMPTY_CONTENT.indexOf(contenthtml) > -1 ||\n                                    editorBodyContent.text().trim().length < 1;\n                                break;\n                            case t.EDITOR.TEXTAREA.TYPE:\n                                editorBodyContent = $(bodyContent);\n                                contenthtml = editorBodyContent[0].value;\n                                condition = contenthtml.trim().length < 1;\n                                break;\n                        }\n\n                        // This regex will match if the editor has some special cases.\n                        // 1) <p dir=\"ltr\" style=\"text-align: left;\"><br></p>.\n                        // 2) <p dir=\"ltr\" style=\"text-align: left;\"><p><br></p></p>.\n                        // The cases are considered empty in the editor.\n                        const regex = /^(<(?:p)[^>]*>)+(<br>)?(<\\/p>)+$/;\n                        const match = regex.exec(contenthtml);\n\n                        // Check the condition and set the placeholder or trigger appropriate events\n                        if (condition) {\n                            // On initial load, contenthtml contains <p> or <span>.\n                            // If it matches the regex meaning the textarea is empty.\n                            const isEmptyContent = match ||\n                                t.EMPTY_CONTENT.indexOf(contenthtml) > -1;\n                            this.setPlaceholder(formSelector, isEmptyContent ?\n                                formSelector.attr('data-textarea-placeholder') : '');\n                            this.triggerAttoNoContent(formSelector);\n                        } else {\n                            this.setPlaceholder(formSelector, '');\n                            this.triggerAttoHasContent(formSelector);\n                        }\n                        M.util.js_complete(key);\n                    },\n\n                    /**\n                     * Remove draft data from the Tiny editor, which is auto-saved according to editorID.\n                     *\n                     * @param {String} editorID The editor ID for which draft data needs to be removed.\n                     */\n                    removeTinyAutoSaveSession: function (editorID) {\n                        // Execute this only if it's a Tiny editor.\n                        if (this.isusingtinymce) {\n                            const editor = window?.tinyMCE?.get(editorID);\n                            if (editor) {\n                                TinyRepository.removeAutosaveSession(editor);\n                            }\n                        }\n                    }\n                };\n            },\n            generate: function(params) {\n                t.get().init(params);\n            }\n        };\n        return t;\n    });\n"],"names":["define","$","str","ajax","ModalFactory","Templates","fragment","ModalEvents","TinyRepository","t","EMPTY_CONTENT","ROOT_COMMENT_VALUE","GET_ALL_VALUE","TEMPLATE_COMMENTS","TEMPLATE_COMMENT","ACTION_CREATE","ACTION_CREATE_REPLY","ACTION_GET_ALL","ACTION_EXPAND","ACTION_DELETE","ACTION_EDIT","ACTION_LOAD_FRAGMENT_FORM","ACTION_LOAD_FRAGMENT_EDIT_FORM","ACTION_EXPAND_ALL","ACTION_COLLAPSE_ALL","ACTION_RENDER_COMMENT","ACTION_APPEND_COMMENT","ACTION_EDITOR_INIT","ACTION_INIT","ACTION_UPDATE_COMMENT_COUNT","ACTION_CLEAR_FORM","ACTION_SHOW_ERROR","FRAGMENT_FORM_CALLBACK","FRAGMENT_EDIT_FORM_CALLBACK","HAS_COMMENT_CLASS","ATTO_CONTENT_TYPE","HAS_CONTENT","NO_CONTENT","SELECTOR","CONTAINER","EXPAND_ALL","COLLAPSE_ALL","SUBMIT_BUTTON","CONTAINER_REPLIES","COMMENT_REPLIES_CONTAINER","COMMENT_COUNT","COMMENT_TEXT_CONTAINER","COMMENT_TEXT","COMMENT_HISTORY","COMMENT_REPLIES_TEXT","LOADING_ICON","COMMENT_AREA_FORM","FORM_SELECTOR","NO_COMMENT","COLLAPSE_LINK","EXPAND_LINK","COMMENT_ITEM","COMMENT_REPLIES_CONTAINER_TO_ITEM","FRAGMENT_FORM","BTN_DELETE","BTN_REPLY","BTN_DELETE_REPLY","ATTO_EDITOR_WRAP","TEXTAREA","COMMENT_COUNT_NUMBER","COMMENT_COUNT_TEXT","ATTO","CONTENT_WRAP","CONTENT","TOOLBAR","TINYMCE","COMMENT_ID","SPAN_COMMENT_ID","TOTAL_REPLY","COMMENT_FILTER","COMMENT_FILTER_HIDE","COMMENT_ERROR","BTN_REPORT","COMMENT_FILTER_ITEM","COMMENT_FILTER_NAME","COMMENT_FILTER_TYPE","BTN_EDIT","BTN_EDIT_REPLY","ATTO_HTML_BUTTON","POST_FOOTER","EDITOR","TYPE","get","elementSelector","btnExpandAll","btnCollapseAll","addComment","containerSelector","studentQuizQuestionId","dialogue","loadingIcon","lastFocusElement","formSelector","contextId","userId","string","deleteDialog","deleteTarget","numberToShow","cmId","countServerData","lastCurrentCount","lastTotal","expand","forceCommenting","canViewDeleted","hasComment","referer","highlight","sortFeature","sortable","workingState","isNoComment","type","init","params","M","util","js_pending","this","escapeSelector","id","el","find","parseInt","data","count","total","sortfeature","forcecommenting","canviewdeleted","isnocomment","allowSelfCommentRating","allowselfcommentrating","isusingtinymce","initServerRender","initBindEditor","bindEvents","js_complete","self","changeWorkingState","each","attrs","replies","comment","deleted","numberofreply","expanded","root","bindCommentEvent","commentcount","updateCommentCount","hide","show","query","window","location","search","substring","getParams","parseQueryString","target","length","scrollToElement","isEditorLoaded","interval","setInterval","editor","_window","tinyMCE","_window$tinyMCE","_self$formSelector","_self$formSelector$fi2","attr","getBody","bindEditorEvent","clearInterval","editorWaiting","tinyEditorId","checkEditorContent","click","e","preventDefault","empty","getComments","then","response","countCommentAndReplies","renderComment","fail","err","showError","message","innerHTML","commentCount","deletedComments","totalDelete","addClass","rootId","unique","formData","convertFormToJson","attoWrap","hasClass","prepend","required","replyto","text","format","createComment","removeTinyAutoSaveSession","_self$formSelector2","_self$formSelector2$f","setTimeout","resetContent","trigger","is","convertForTemplate","appendComment","handleFailWhenCreateComment","on","asc","sort","desc","nameSelector","iconSelector","orderBy","isCurrent","ascString","descString","not","eachName","eachType","defaultString","removeClass","sortType","setSort","getParamsBeforeCallApi","numbertoshow","call","methodname","args","studentquizquestionid","cmid","when","error","done","showDialog","title","body","html","create","types","CANCEL","modal","getRoot","hidden","reload","current","s","get_string","noCommentSelector","filter","emptyReplies","checkEmptyElement","comments","render","i","hasOwnProperty","reply","bindReplyEvent","bindDeleteEvent","getFragmentFormReplyEvent","bindExpandEvent","bindCollapseEvent","getFragmentEditFormEvent","replySelector","boolean","elementToHide","visibility","prop","css","getFooter","focus","deleteCommentCount","replyCount","deleteReplyCount","constructor","Array","item","deletedtime","j","expandComment","commentid","itemSelector","key","clone","append","convertedItem","currentDisplayComment","newCount","newTotalCount","replaceWith","shortcontent","single","setHasComment","hascomment","reportlink","buildRefererReportLink","form","name","checked","val","isReply","parent","loadFragmentForm","fragmentForm","cancelbutton","remove","loadFragment","js","replaceNodeContents","textFragmentFormId","triggerAttoNoContent","bindFragmentFormEvent","formFragmentSelector","appendTo","createReplyComment","fragmentFormCancelEvent","replyContainer","_formSelector$find","repliesEl","numReply","fragmentFormSelector","first","postFooter","isEdit","commentSelector","closest","DEFAULT","deletecomment","confirmdeletecomment","footer","deletetext","cancel","deleteComment","success","convertedCommentData","parentCountSelector","countSelector","oldReplies","shown","bindHandleTinyEditor","intervalID","bindHandleAttoEditor","setPlaceholder","fadeIn","textareaSelector","attoEditableId","attoEditable","document","getElementById","MutationObserver","mutationsList","forEach","mutation","attributeName","observe","attributes","childList","subtree","change","bindHandleTextareaEditor","setContent","value","children","container","hasCommentClass","vars","split","queryString","pair","decodeURIComponent","push","speed","top","offset","animate","scrollTop","link","encodeURIComponent","triggerAttoHasContent","editorContentWrap","submitBtn","placeholder","inArray","loadFragmentEditForm","bindFragmentEditFormEvent","editCommentEvent","editComment","commentTextSelector","bodyContent","Date","now","editorBodyContent","contenthtml","condition","indexOf","trim","regex","match","exec","isEmptyContent","editorID","_window2","_window2$tinyMCE","removeAutosaveSession","generate"],"mappings":"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"}